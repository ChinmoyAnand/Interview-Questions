 Spring / REST / Microservice Interview:

1. SpringBoot caching such as in-memory caching, distributed caching, and caching annotations. 

2. How you will get to know how much time took to complete one request in spring boot.

3. What is SAGA pattern, and when would you use it? Explain in detail.

Each microservice has its own database. Some business transactions, however, span multiple service so you need a mechanism to ensure data consistency across services.
For example, lets imagine that you are building an e-commerce store where customers have a credit limit. The application must ensure that a new order will not exceed the customer’s credit limit. Since Orders and Customers are in different databases the application cannot simply use a local ACID transaction. Problem How to maintain data consistency across services? 
IMPORTANT: 2PC is not an option Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.


4. How would you deal with staleness of REST API cache?
Let's assume you have implemented caching of REST API in your client or web service (which depends on other webservices).

How would you ensure that the cached responses of the REST API is not stale?

Depending on the rate at which you expect the information to change, you can have different mechanism.  You have to keep additional metadata about the API response to implement caching + avoiding stale data.  Meta data that you require would be:  (a) when did you last receive the data, (b) was there an "Expires" header in the response, (c) history or rate of change of data etc.

After that, you can implement on or more of following:

- Issue "GET + If-modified-since" (GIMS) request instead of simple GET request.
- When your server receives down stream REST API, respond from the cache; but immediately after that, asynchronously refresh your cache from upstream server(s).
- Issue GIMS request if you are at more than half the time between last refresh check and cache expiry.
- If your upstream service has put too conservative Expiry header, then you can add additional logic to issue GIMS even after cache expiry using rate of change of data algorithm.  Let's say, t0 is when you received original data.  Expiry header says response will expire in 5 days.  So, on 6th day, you issue GIMS.  If it's still not expired, you assume effective expiry date = t0 + 5 days + 2 * (now - expiry as per Expires: header).  So, you won't check for 2 more days.  On 8th day, you again check issue GIMS.  If server ever returns 200 ok response, t0 resets.

5. How does Microservice Architecture work?

In Orchestration, we rely on a central system to control and call other Microservices in a certain fashion to complete a given task. The central system maintains the state of each step and sequence of the overall workflow.

Let’s say we want to develop a microservice that will send product recommendation email in a fictitious e-shop. 
In order to send Recommendations, we need to have access to user’s order history which lies in a different microservices.

In the Orchestration approach, this new microservice for recommendations will make synchronous calls to order service and 
fetch the relevant data, then based on his past purchases we will calculate the recommendations. 
Doing this for a million users will become cumbersome and will tightly couple the two microservices.

In Choreography approach, we will use event-based Asynchronous communication where whenever a user makes a purchase, 
an event will be published by order service. Recommendation service will listen to this event and start building user recommendation. 
This is a loosely coupled approach and highly scalable. 
The event, in this case, does not tell about the action, but just the data.

•	Clients – Different users from various devices send requests.
•	Identity Providers – Authenticates user or client’s identities and issues security tokens.
•	API Gateway – Handles client requests.
•	Static Content – Houses all the content of the system.
•	Management – Balances services on nodes and identifies failures.
•	Service Discovery – A guide to find the route of communication between micro services.
•	Content Delivery Networks – Distributed network of proxy servers and their data centers.
•	Remote Service – Enables the remote access information that resides on a network of IT devices.

6. What is the use of Profiles in spring boot?

While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different. To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.

7. How can we use Jetty instead of tomcat in our web application?

8. What is the use of Inversion of controller and Dependency Injection? Are both the same?

IOC is control inversed to Spring framework instead of creating the beans manually, dependency injection to make available the instance wherever required by mentioning Autowired

9. What is difference between Application Context and Bean Factory? What are the additional features we have in Application Context?

Application Context is eagerly loaded and Bean factory is lazily loaded context, even Application context have some additional 
features like Internationalization, Annotations, AOP etc.

10. 
What will happen if we don’t have no-args constructor in Entity bean?
Answer: Hibernate uses Reflection API to create instance of Entity beans, usually when you call get() or load() methods. 
The method Class.newInstance() is used for this and it requires no-args constructor. So if you won’t have no-args constructor in entity beans, hibernate will fail to instantiate it and you will get HibernateException.

11. What is the concept of statelessness in REST?

The REST architecture is designed in such a way that the client state is not maintained on the server. This is known as statelessness.
The context is provided by the client to the server using which the server processes the client’s request. The session on the server is identified by the session identifier sent by the client.

12. What is orchestration and Choreography approach in micro services? Give one example.

13. Interservice communication? How to secure a microservice? Authentication/authorization approach?
14. How to maintain data consistency for 2 Microservices with each having its own database?

15. How do you control the concurrent Active session using Spring Security?

Another Spring interview question is based on Out of box feature provided by the Spring framework. 
You can easily control How many active sessions a user can have with a Java application by using Spring Security. 
Apart from that Spring Security also provides the "remember me" feature which you can use to provide easier access for your users by remembering their login details on their personal computer.

16. What are the HTTP Methods?

HTTP Methods are also known as HTTP Verbs. 
They form a major portion of uniform interface restriction followed by the REST that specifies what action has to be followed to get the requested resource. 

Below are some examples of HTTP Methods: 

•GET: This is used for fetching details from the server and is basically a read-only operation. 
•POST: This method is used for the creation of new resources on the server. 
•PUT: This method is used to update the old/existing resource on the server or to replace the resource. 
•DELETE: This method is used to delete the resource on the server. 
•PATCH: This is used for modifying the resource on the server. 
•OPTIONS: This fetches the list of supported options of resources present on the server. 
The POST, GET, PUT, DELETE corresponds to the create, read, update, delete operations which are most commonly called CRUD Operations

17. What are the differences between get() and load() method in Hibernate?

The key difference between the get() and load() method is that load() will throw an exception if an object with id passed to them is not found, but get() will return null.

Another important difference is that load can return proxy without hitting the database unless required (when you access any attribute other than id) but get() always go to the database, so sometimes using load() can be faster than the get() method.

Use the load() method, if you know the object exists, and get() method if you are not sure about the object's existence.

18. What’s the difference between @Component, @Controller, @Repository & @Service annotations in Spring?

@Component is used to indicate that a class is a component. These classes are used for auto-detection and configured as bean when annotation based configurations are used.

@Controller is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.

@Repository annotation is used to indicate that a component is used as a repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.

@Service is used to indicate that a class is a Service. Usually, the business facade classes that provide some services are annotated with this.

We can use any of the above annotations for a class for auto-detection but different types are provided so that 
you can easily distinguish the purpose of the annotated classes.


19. How to disable spring beans based on specific conditions

Using Conditional annotations : @Conditional, @ConditionalProperty, @ConditionalOnExpressions
Using  spring profiles
------------

