 Spring / REST / Microservice Interview:

1. SpringBoot caching such as in-memory caching, distributed caching, and caching annotations. 

2. How you will get to know how much time took to complete one request in spring boot.

3. What is SAGA pattern, and when would you use it? Explain in detail.

Each microservice has its own database. Some business transactions, however, span multiple service so you need a mechanism to ensure data consistency across services.
For example, lets imagine that you are building an e-commerce store where customers have a credit limit. The application must ensure that a new order will not exceed the customer’s credit limit. Since Orders and Customers are in different databases the application cannot simply use a local ACID transaction. Problem How to maintain data consistency across services? 
IMPORTANT: 2PC is not an option Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.


4. How would you deal with staleness of REST API cache?
Let's assume you have implemented caching of REST API in your client or web service (which depends on other webservices).

How would you ensure that the cached responses of the REST API is not stale?

Depending on the rate at which you expect the information to change, you can have different mechanism.  You have to keep additional metadata about the API response to implement caching + avoiding stale data.  Meta data that you require would be:  (a) when did you last receive the data, (b) was there an "Expires" header in the response, (c) history or rate of change of data etc.

After that, you can implement on or more of following:

- Issue "GET + If-modified-since" (GIMS) request instead of simple GET request.
- When your server receives down stream REST API, respond from the cache; but immediately after that, asynchronously refresh your cache from upstream server(s).
- Issue GIMS request if you are at more than half the time between last refresh check and cache expiry.
- If your upstream service has put too conservative Expiry header, then you can add additional logic to issue GIMS even after cache expiry using rate of change of data algorithm.  Let's say, t0 is when you received original data.  Expiry header says response will expire in 5 days.  So, on 6th day, you issue GIMS.  If it's still not expired, you assume effective expiry date = t0 + 5 days + 2 * (now - expiry as per Expires: header).  So, you won't check for 2 more days.  On 8th day, you again check issue GIMS.  If server ever returns 200 ok response, t0 resets.

5. How does Microservice Architecture work?

•	Clients – Different users from various devices send requests.
•	Identity Providers – Authenticates user or client’s identities and issues security tokens.
•	API Gateway – Handles client requests.
•	Static Content – Houses all the content of the system.
•	Management – Balances services on nodes and identifies failures.
•	Service Discovery – A guide to find the route of communication between micro services.
•	Content Delivery Networks – Distributed network of proxy servers and their data centers.
•	Remote Service – Enables the remote access information that resides on a network of IT devices.

6. What is the use of Profiles in spring boot?

While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different. To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.

7. How can we use Jetty instead of tomcat in our web application?

8. What is the use of Inversion of controller and Dependency Injection? Are both the same?

IOC is control inversed to Spring framework instead of creating the beans manually, dependency injection to make available the instance wherever required by mentioning Autowired

9. What is difference between Application Context and Bean Factory? What are the additional features we have in Application Context?

Application Context is eagerly loaded and Bean factory is lazily loaded context, even Application context have some additional 
features like Internationalization, Annotations, AOP etc.

10. 
What will happen if we don’t have no-args constructor in Entity bean?
Answer: Hibernate uses Reflection API to create instance of Entity beans, usually when you call get() or load() methods. 
The method Class.newInstance() is used for this and it requires no-args constructor. So if you won’t have no-args constructor in entity beans, hibernate will fail to instantiate it and you will get HibernateException.

11. What is the concept of statelessness in REST?

The REST architecture is designed in such a way that the client state is not maintained on the server. This is known as statelessness.
The context is provided by the client to the server using which the server processes the client’s request. The session on the server is identified by the session identifier sent by the client.
------------

