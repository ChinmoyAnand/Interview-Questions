 Spring / REST / Microservice Interview:

1. SpringBoot caching such as in-memory caching, distributed caching, and caching annotations. 

2. How you will get to know how much time took to complete one request in spring boot.

3. What is SAGA pattern, and when would you use it? Explain in detail.

Each microservice has its own database. Some business transactions, however, span multiple service so you need a mechanism to ensure data consistency across services.
For example, lets imagine that you are building an e-commerce store where customers have a credit limit. The application must ensure that a new order will not exceed the customer’s credit limit. Since Orders and Customers are in different databases the application cannot simply use a local ACID transaction. Problem How to maintain data consistency across services? 
IMPORTANT: 2PC is not an option Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.


4. How would you deal with staleness of REST API cache?
Let's assume you have implemented caching of REST API in your client or web service (which depends on other webservices).

How would you ensure that the cached responses of the REST API is not stale?

Depending on the rate at which you expect the information to change, you can have different mechanism.  You have to keep additional metadata about the API response to implement caching + avoiding stale data.  Meta data that you require would be:  (a) when did you last receive the data, (b) was there an "Expires" header in the response, (c) history or rate of change of data etc.

After that, you can implement on or more of following:

- Issue "GET + If-modified-since" (GIMS) request instead of simple GET request.
- When your server receives down stream REST API, respond from the cache; but immediately after that, asynchronously refresh your cache from upstream server(s).
- Issue GIMS request if you are at more than half the time between last refresh check and cache expiry.
- If your upstream service has put too conservative Expiry header, then you can add additional logic to issue GIMS even after cache expiry using rate of change of data algorithm.  Let's say, t0 is when you received original data.  Expiry header says response will expire in 5 days.  So, on 6th day, you issue GIMS.  If it's still not expired, you assume effective expiry date = t0 + 5 days + 2 * (now - expiry as per Expires: header).  So, you won't check for 2 more days.  On 8th day, you again check issue GIMS.  If server ever returns 200 ok response, t0 resets.

5. How does Microservice Architecture work?

In Orchestration, we rely on a central system to control and call other Microservices in a certain fashion to complete a given task. The central system maintains the state of each step and sequence of the overall workflow.

Let’s say we want to develop a microservice that will send product recommendation email in a fictitious e-shop. 
In order to send Recommendations, we need to have access to user’s order history which lies in a different microservices.

In the Orchestration approach, this new microservice for recommendations will make synchronous calls to order service and 
fetch the relevant data, then based on his past purchases we will calculate the recommendations. 
Doing this for a million users will become cumbersome and will tightly couple the two microservices.

In Choreography approach, we will use event-based Asynchronous communication where whenever a user makes a purchase, 
an event will be published by order service. Recommendation service will listen to this event and start building user recommendation. 
This is a loosely coupled approach and highly scalable. 
The event, in this case, does not tell about the action, but just the data.

•	Clients – Different users from various devices send requests.
•	Identity Providers – Authenticates user or client’s identities and issues security tokens.
•	API Gateway – Handles client requests.
•	Static Content – Houses all the content of the system.
•	Management – Balances services on nodes and identifies failures.
•	Service Discovery – A guide to find the route of communication between micro services.
•	Content Delivery Networks – Distributed network of proxy servers and their data centers.
•	Remote Service – Enables the remote access information that resides on a network of IT devices.

6. What is the use of Profiles in spring boot?

While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different. To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.

7. How can we use Jetty instead of tomcat in our web application?

8. What is the use of Inversion of controller and Dependency Injection? Are both the same?

IOC is control inversed to Spring framework instead of creating the beans manually, dependency injection to make available the instance wherever required by mentioning Autowired

9. What is difference between Application Context and Bean Factory? What are the additional features we have in Application Context?

Application Context is eagerly loaded and Bean factory is lazily loaded context, even Application context have some additional 
features like Internationalization, Annotations, AOP etc.

10. 
What will happen if we don’t have no-args constructor in Entity bean?
Answer: Hibernate uses Reflection API to create instance of Entity beans, usually when you call get() or load() methods. 
The method Class.newInstance() is used for this and it requires no-args constructor. So if you won’t have no-args constructor in entity beans, hibernate will fail to instantiate it and you will get HibernateException.

11. What is the concept of statelessness in REST?

The REST architecture is designed in such a way that the client state is not maintained on the server. This is known as statelessness.
The context is provided by the client to the server using which the server processes the client’s request. The session on the server is identified by the session identifier sent by the client.

12. What is orchestration and Choreography approach in micro services? Give one example.

13. Interservice communication? How to secure a microservice? Authentication/authorization approach?
14. How to maintain data consistency for 2 Microservices with each having its own database?

15. How do you control the concurrent Active session using Spring Security?

Another Spring interview question is based on Out of box feature provided by the Spring framework. 
You can easily control How many active sessions a user can have with a Java application by using Spring Security. 
Apart from that Spring Security also provides the "remember me" feature which you can use to provide easier access for your users by remembering their login details on their personal computer.

16. What are the HTTP Methods?

HTTP Methods are also known as HTTP Verbs. 
They form a major portion of uniform interface restriction followed by the REST that specifies what action has to be followed to get the requested resource. 

Below are some examples of HTTP Methods: 

•GET: This is used for fetching details from the server and is basically a read-only operation. 
•POST: This method is used for the creation of new resources on the server. 
•PUT: This method is used to update the old/existing resource on the server or to replace the resource. 
•DELETE: This method is used to delete the resource on the server. 
•PATCH: This is used for modifying the resource on the server. 
•OPTIONS: This fetches the list of supported options of resources present on the server. 
The POST, GET, PUT, DELETE corresponds to the create, read, update, delete operations which are most commonly called CRUD Operations

17. What are the differences between get() and load() method in Hibernate?

The key difference between the get() and load() method is that load() will throw an exception if an object with id passed to them is not found, but get() will return null.

Another important difference is that load can return proxy without hitting the database unless required (when you access any attribute other than id) but get() always go to the database, so sometimes using load() can be faster than the get() method.

Use the load() method, if you know the object exists, and get() method if you are not sure about the object's existence.

18. What’s the difference between @Component, @Controller, @Repository & @Service annotations in Spring?

@Component is used to indicate that a class is a component. These classes are used for auto-detection and configured as bean when annotation based configurations are used.

@Controller is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.

@Repository annotation is used to indicate that a component is used as a repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.

@Service is used to indicate that a class is a Service. Usually, the business facade classes that provide some services are annotated with this.

We can use any of the above annotations for a class for auto-detection but different types are provided so that 
you can easily distinguish the purpose of the annotated classes.


19. How to disable spring beans based on specific conditions

Using Conditional annotations : @Conditional, @ConditionalProperty, @ConditionalOnExpressions
Using  spring profiles

20. API Gateway

API Gateway is a special class of microservices that meets the need of a single client application (such as android app, web app, angular JS app, iPhone app, etc) and provide it with single entry point to the backend resources (microservices), providing cross-cutting concerns to them such as security, monitoring/metrics & resiliency.

Client Application can access tens or hundreds of microservices concurrently with each request, 
aggregating the response and transforming them to meet the client application’s needs. 
Api Gateway can use a client-side load balancer library (Ribbon) to distribute load across instances based on round-robin fashion. It can also do protocol translation i.e. HTTP to AMQP if necessary. It can handle security for protected resources as well.

Features of API Gateway

Spring Cloud DiscoveryClient integration Request Rate Limiting (available in Spring Boot 2.x) 
Path Rewriting Hystrix Circuit Breaker integration for resiliency
------------

21. You are tasked with designing a new Java microservice for a cloud-native application.
How would you leverage cloud-native principles and design patterns to ensure scalability, resilience, and efficient resource utilization in a cloud environment?

Ideal Answer (5 star)

Containerization:
Utilize containerization (e.g., Docker) for packaging the microservice with its dependencies.
Ensures consistency across different environments and facilitates easy deployment.
Orchestration:
Use orchestration tools like Kubernetes to automate deployment, scaling, and management of containers.
Ensures efficient resource utilization and scalability.
Statelessness:
Design microservices to be stateless, allowing easy horizontal scaling.
State is managed externally (e.g., databases, caches).
Auto-Scaling:
Implement auto-scaling based on demand using cloud provider features.
Ensures efficient resource allocation and cost optimization.
Resilience and Fault Tolerance:
Implement circuit breakers and retries to handle faults gracefully.
Utilize distributed tracing for identifying and resolving issues.
Externalized Configuration:
Externalize configuration settings to easily adapt to different environments.
Facilitates the Twelve-Factor App methodology.
API Gateway:
Implement an API gateway for centralized access and to manage routing.
Facilitates load balancing and improves security.
Serverless Computing:
Consider serverless computing for event-driven workloads.
Reduces operational overhead and aligns with pay-as-you-go models.
Logging and Monitoring:
Implement comprehensive logging and monitoring.
Use cloud-native monitoring tools for real-time insights into application behavior.
Immutable Infrastructure:
Treat infrastructure as code and use immutable infrastructure principles.
Ensures consistency and reproducibility in deployments.
Data Management:
Choose cloud-native databases for scalability and resilience.
Implement sharding or partitioning for efficient data distribution.
Continuous Integration/Continuous Deployment (CI/CD):
Implement CI/CD pipelines for automated testing, building, and deployment.
Facilitates rapid and reliable software delivery.


22. REST API Caching -- designing from the server side
You are developing a Microservice, which serves fairly static data using REST API. For example, details about the Patents filed. Let's assume you have an API to get details about the patent filed; such as GET ./patentDetails/PATENTID/

If the patent is granted, all the details of the patent are now fixed. 
How can you improve the efficiency of the web app and conserve the bandwidth of your web service?

Ideal Answer (5 star)
In this case, the API response is going to be static for a long period of time, if patent is granted.  
If patent is NOT granted yet, you may want client to refresh every month or so.
So, you can simply use the HTTP header to enable proxy caching.
For granted patents:
Expires:
For non-granted patents:
Expires:
Make sure there is no "Cache-Control: " header with "no-cache" in the response.
This will enable clients to issue "GET" request with "If-Modified-Since" header and API implementation can simply return "304 Not Modified" instead of sending all the data about the patent.
Based on large Expires headers, many downstream proxies or browser will use optimization algorithm to not even refresh the content from server.

23. REST API: Dealing with response time SLA
You are writing a micro service that has signed up for certain SLA of response time. 
Let's say, you must respond within 1 second of receiving the request. However, your micro service depends on 3 external micro services with 500 ms SLA each.

How would you ensure that you meet your SLA most of the times?

Ideal Answer (5 star)
REST API Caching is the primary solution to meet the response time SLA requirements. 
You should cache the response from the other micro services; with proper mechanism to deal with staleness of the cache.


24. Scenario: Fault Tolerance
Describe a situation where a critical microservice in your project experienced downtime. How did you implement fault tolerance, 
and what strategies or technologies did you employ to ensure the resilience of the system?

Ideal Answer (5 star)

Circuit Breaker Pattern:
Implemented a circuit breaker pattern to detect and handle failures.
Tripped the circuit when failures exceeded a threshold, preventing further requests.
Retry Mechanisms:
Introduced automatic retry mechanisms for transient errors.
Configured exponential backoff to avoid overwhelming the service.
Graceful Degradation:
Implemented graceful degradation by providing limited functionality during degraded states.
Ensured essential functionalities remained available even in degraded mode.
Fallback Mechanisms:
Employed fallback mechanisms to switch to alternative methods or default values when the service was unavailable.
Monitoring and Alerts:
Set up continuous monitoring for the microservice.
Configured alerts to notify the team of downtimes or performance issues.
Load Balancing and Redundancy:
Implemented load balancing to distribute traffic evenly across multiple instances.
Utilized redundant instances and a failover mechanism for high availability.


25. How would you implement SSO for Microservice Architecture?
How would you implement SSO for Microservice Architecture?

Ideal Answer (5 star)
SSO allows a user or entity to log in once and gain access to multiple systems. In the context of a microservices architecture, SSO can have two meanings: Authentication of end-users – It’s very convenient for end-users to have one central login, preferably using existing credentials, instead of requiring new credentials to log into your app. You can use identity and access management (IAM) solutions to set up a user database and define permissions for your user-facing microservices. Microservices can redirect users to the IAM system for authentication, receive an encrypted SSO token, and then use it to log in users on subsequent attempts. Microservices can also use the IAM system for authorization, and the SSO token can specify which resources the user is permitted to access. Authentication of microservices – You can also enable SSO for microservices that need to connect to other microservices, or to external services requesting access via API. Here you need to authorize a software entity or service account, not human users. You can use the same IAM solution. When a software entity requires access, it can be redirected to the IAM, and the IAM system provides an SSO token they can use in future API calls. JSON Web Tokens JSON Web Token (JWT) provides a mechanism for sharing a set of claims or properties from a client to a microservices application in an encrypted and secure way. JWTs can also secure communication between services or pass end-user context and data between microservices. For example, you can use a JWT token to pass the ID of the calling microservice, the ID of the client, or the system that initiated the request. You can also store authorization and authentication properties in a JWT token and share them between multiple clients and servers. Learn more in our detailed guide to JWT authentication OAuth API Authentication OAuth 2.0 provides an industry-standard protocol for authorizing users in distributed systems. In the context of microservices, the OAuth 2.0 client credential flow supports secure server-to-server communication between API clients and API servers. The OAuth framework reduces the burden on developers, eliminating the need to build their own authentication mechanism in each microservice. OpenID Connect (OIDC) extends OAuth to add federated identities, making it possible to set up delegated authorization. Together, these two layers allow developers to build systems that interact with multiple identity providers. With OIDC and OAuth 2.0, it’s also possible to retrieve a user ID by sending an access token to the user information endpoint. The path to this endpoint can be determined using an OIDC lookup.


26. How do you configure SpringBoot to use a custom error page for exceptions thrown during application startup?

First, you have to think about all the HTTP error status codes you want your application to return. Then, you have to define a method for each of them in your @ControllerAdvice annotated class. Lastly, you have to associate these methods with their exceptions with the @ExceptionHandler annotation.

27. What is orchestration and Choreography approach in micro services? Give one example.
In Orchestration, we rely on a central system to control and call other Microservices in a certain fashion to complete a given task. The central system maintains the state of each step and sequence of the overall workflow.

Let’s say we want to develop a microservice that will send product recommendation email in a fictitious e-shop. In order to send Recommendations, we need to have access to user’s order history which lies in a different microservices.

In Orchestration approach, this new microservice for recommendations will make synchronous calls to order service and fetch the relevant data, then based on his past purchases we will calculate the recommendations. Doing this for a million users will become cumbersome and will tightly couple the two microservices.

In Choreography approach, we will use event-based Asynchronous communication where whenever a user makes a purchase, an event will be published by order service. Recommendation service will listen to this event and start building user recommendation. This is a loosely coupled approach and highly scalable. The event, in this case, does not tell about the action, but just the data.

28. Handling Concurrent Modifications
You are tasked with developing a feature for a high-traffic e-commerce application where multiple users can update product information simultaneously. How would you handle concurrent modifications to ensure data consistency?
Ideal Answer (5 Star)
To handle concurrent modifications and ensure data consistency, I would implement optimistic locking using a version field in the database. This approach involves adding a version number to the product information. When a user updates the product, the application checks the current version against the version in the database. If they match, the update proceeds and the version is incremented. If not, it indicates another transaction has modified the data, and an exception is thrown for the user to retry. Here's a simplified example using Java:


@Entity
public class Product {
    @Id
    private Long id;
    private String name;
    private Double price;
    @Version
    private Integer version;
    // Getters and setters
}


In a Spring Data JPA environment, the @Version annotation handles versioning automatically. This strategy minimizes locking and improves performance in high-concurrency environments.


29. Data Integrity with Transactions
You are developing a banking application where multiple operations need to be atomic to ensure data integrity during money transfers between accounts. How would you ensure transactional integrity in your Java application?
Ideal Answer (5 Star)
To ensure transactional integrity in a banking application, I would use the following approaches:

    1. **ACID Transactions**: Use database transactions to ensure atomicity, consistency, isolation, and durability. In Java, this can be achieved using JPA or Spring's `@Transactional` annotation.

    2. **Transaction Propagation**: Configure transaction propagation settings to control how transactions are handled across service boundaries.

    3. **Isolation Levels**: Choose an appropriate isolation level (e.g., READ_COMMITTED) to balance consistency and concurrency.

    4. **Two-Phase Commit**: For distributed transactions across multiple database systems, use a two-phase commit protocol.

Example of using Spring's `@Transactional`:


@Service
public class BankingService {
    @Transactional
    public void transferFunds(Account from, Account to, BigDecimal amount) {
        from.debit(amount);
        to.credit(amount);
        accountRepository.save(from);
        accountRepository.save(to);
    }
}


This setup ensures that all operations within the method execute within a single transaction, maintaining data integrity.


30. Handling High Traffic on REST API
You are responsible for a REST API that is experiencing a significant increase in traffic, leading to performance degradation. How would you optimize the API to handle the increased load while maintaining performance?
Ideal Answer (5 Star)
To handle high traffic, I would implement several strategies: 
1. **Caching**: Utilize a caching layer (like Redis or Memcached) to store frequently accessed data, reducing database load. 
2. **Load Balancing**: Use a load balancer to distribute incoming requests across multiple server instances, ensuring no single server is overwhelmed. 
3. **Database Optimization**: Optimize database queries and indexes. Consider read replicas for scaling out the database. 
4. **Asynchronous Processing**: Offload time-consuming tasks to background jobs using a message queue (like RabbitMQ or Kafka). 
5. **Connection Pooling**: Use connection pooling to efficiently manage database connections. 
6. **Rate Limiting**: Implement rate limiting to prevent abuse and ensure fair usage. 
7. **Monitoring and Alerts**: Set up monitoring to track performance metrics and alerts for unusual spikes in traffic. 
8. **Horizontal Scaling**: Add more instances to handle increased load, taking advantage of cloud-based solutions for elastic scaling.



31. Designing a RESTful API for a New Feature
Your team is tasked with implementing a new feature that requires a RESTful API endpoint. Describe the process you would follow to design and implement this API, considering RESTful principles and best practices.
Ideal Answer (5 Star)
The process involves several key steps: 
1. **Requirement Gathering**: Understand the feature requirements and data models. 
2. **Endpoint Design**: Define clear, consistent, and meaningful URI paths using nouns for resources (e.g., `/users/{id}/orders`). 
3. **HTTP Methods**: Use appropriate HTTP methods (GET, POST, PUT, DELETE) for different operations. 
4. **Status Codes**: Return proper HTTP status codes for responses (e.g., 200 for success, 404 for not found). 
5. **Request and Response Format**: Use JSON for data interchange and ensure proper validation and error handling. 
6. **Security**: Implement authentication and authorization (e.g., OAuth2, JWT). 
7. **Documentation**: Document the API using tools like Swagger/OpenAPI. 
8. **Versioning**: Plan for API versioning to handle future changes without breaking existing clients. 
9. **Testing**: Write unit and integration tests to ensure the API works as expected.


32. Implementing Transactions
You need to implement a feature that handles multiple related database operations. How would you ensure these operations maintain data integrity, especially in the event of a failure?
Ideal Answer (5 Star)
To ensure data integrity across multiple related operations, I would use transactions. Transactions allow multiple operations to be treated as a single unit of work, ensuring either all operations succeed or none. I would use the SQL transaction statements: BEGIN, COMMIT, and ROLLBACK. If an error occurs during any operation, a ROLLBACK is issued to revert changes. Ensuring proper error handling logic is also crucial.
Here's a basic example of using transactions:
BEGIN; UPDATE accounts SET balance = balance - 100 WHERE account_id = 1; UPDATE accounts SET balance = balance + 100 WHERE account_id = 2; IF error THEN ROLLBACK; ELSE COMMIT; END IF;


33. Securing a REST API with Spring Security
You need to secure a REST API in your Spring Boot application to ensure that only authenticated users can access it. Outline how you would achieve this using Spring Security.
Ideal Answer (5 Star)
To secure a REST API in a Spring Boot application, I would integrate Spring Security to handle authentication and authorization. Hereâ€™s a step-by-step approach:

1. Add Spring Security dependency to pom.xml:

```xml

    org.springframework.boot
    spring-boot-starter-security

```

2. Create a SecurityConfiguration class to configure HTTP security:

```java
@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
                .antMatchers("/api/public/**").permitAll()
                .anyRequest().authenticated()
            .and()
            .httpBasic();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
            .withUser("user")
            .password(passwordEncoder().encode("password"))
            .roles("USER");
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

This configuration disables CSRF for simplicity, sets up basic authentication, and secures all endpoints except those under /api/public/. For a production environment, I would consider using JWT tokens for stateless authentication.




34. Creating a Custom Spring Boot Starter
Your company wants to standardize certain configurations and dependencies across multiple Spring Boot applications. Describe how you would create a custom Spring Boot starter to achieve this.
Ideal Answer (5 Star)
Creating a custom Spring Boot starter involves packaging a set of common dependencies and configurations into a reusable format. Here's how I would approach it:

1. Create a new Maven project for the starter:

```xml
com.example
custom-spring-boot-starter
1.0.0
jar
```

2. Define common dependencies in the `pom.xml`:

```xml

    org.springframework.boot
    spring-boot-starter


    com.example
    common-library

```

3. Create an `auto-configuration` class:

```java
@Configuration
@ConditionalOnClass(SomeCommonClass.class)
public class CustomAutoConfiguration {

    @Bean
    public SomeService someService() {
        return new SomeServiceImpl();
    }
}
```

4. Include a `spring.factories` file to register the auto-configuration:

```
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
com.example.CustomAutoConfiguration
```

By following these steps, the custom starter can be included in any Spring Boot application to apply the standardized configuration and dependencies automatically.



35. Scaling JMS for High Availability
Your team needs to scale a JMS-based application for high availability and load balancing. What architectural changes would you propose to achieve this?
Ideal Answer (5 Star)
To scale a JMS-based application, I would propose setting up a clustered JMS provider with multiple instances to distribute the load. Using a message broker like ActiveMQ or RabbitMQ, which supports clustering and high availability, can help achieve this. Configuring connection factories with failover and load balancing capabilities ensures clients can connect to any available broker instance. Implementing a load balancer in front of the JMS cluster can distribute client requests evenly. Additionally, ensuring that message producers and consumers are stateless and can run in parallel instances helps scale the application horizontally.

36. Database Sharding Strategy
Your application's database has grown significantly, leading to performance issues. You're considering database sharding to improve performance. What factors would you consider in designing a sharding strategy?
Ideal Answer (5 Star)
When designing a sharding strategy, I would consider factors such as the data access patterns, size of the dataset, and future scalability requirements. A key decision is choosing the sharding key, which should evenly distribute data across shards while minimizing cross-shard queries. Common sharding strategies include range-based, hash-based, and geographical sharding, each suitable for different types of workloads. I would also plan for shard rebalancing to accommodate future growth and implement strategies to handle distributed transactions if necessary. Monitoring and maintaining the shards for performance and consistency are also critical aspects of a sharding strategy.

37. 
