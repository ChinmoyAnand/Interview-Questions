1. Strategy Design Pattern for encryption of documents
As part of the web services you are providing, a set of documents need to be encrypted before they are stored at a specific location in the cloud; say S3 bucket in AWS cloud.

Customer can choose various level of encryption, and there are cost associated with level of encryption and security. 
It may start with NULL encryption - which is basically no encryption. Apart from that, customer can choose from variety of encryptions 
such as "Triple DES", "RSA", "AES" etc.

2. Explain the working of a College internet or a Corporate Internet which restricts few sites access using design patterns.
PROXY DESIGN PATTERN.

Proxy Design Pattern provides controlled access of a functionality.The client, and each proxy, believes it is delegating messages to the real server.

The proxy first checks the host you are connecting to, if it is not part of restricted site list, then it connects to the real internet.

3. If you are working with an online trading application, you may want the functionality to queue trades placed after hours and process them when the stock market opens. You also need to asynchronously handle the order statuses sent from the stock exchange like partially-filled, rejected, fully filled, etc, and update the online order information. 
How will you go about solution this?

4. You need to change the logic of a module that several other modules depend on. How will you make the necessary changes without impacting the dependent modules?

5. spring version 2.3 - moving application to 2.5 version, getting conflicts because of dependency how will you reslove conflicts ?

6. Adapter design patter - structural.
Adapter design pattern - Software design pattern
You have two incompatible interfaces : MediaPlayer and MediaPackage. 
MP3 class is an implementation of the MediaPlayer interface and we have VLC and MP4 as implementations of the MediaPackage interface. We want to use MediaPackage implementations as MediaPlayer instances.

What design pattern will you use to work with two incompatible classes?


Ideal Answer (5 star)
ADAPTER DESIGN PATTERN is to be used here.

An Adapter Pattern says that just "converts the interface of a class into another interface that a client wants".
In other words, to provide the interface according to client requirement while using the services of a class with a different interface.
The Adapter Pattern is also known as Wrapper.

Advantage of Adapter Pattern
 1. It allows two or more previously incompatible objects to interact.
 2. It allows reusability of existing functionality.


Usage of Adapter pattern:
 1. When an object needs to utilize an existing class with an incompatible interface.
 2. When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.
 3. When you want to create a reusable class that cooperates with classes which don't have compatible interfaces.

sample code : https://gist.github.com/akki5256/88d3e28934ec3519914ce72184d1edcf

7. Which Design pattern will you use for below scenario? Facade

ShopKeeper selling Mobiles Shopkeeper has a list of all the phones available in his shop with all the details of phones like model, price, offers, etc. When a customer approaches shopkeeper, the customer inquires the shopkeeper of the phone he wants or the phones the shopkeeper has. The shopkeeper simply answers the customers queries, without giving him all the information that he has, but giving only the information needed by the customer.

Other similar examples:

-Starting a car (just by turning the key, we start the car) -Ticket booking websites (using a single interface we can book tickets, hotels, trains individually or together) -Microwave oven which provides you preprogrammed switches etc
Answer::
Facade Design Pattern - All the complex processes happening in the system are not shown to the client, but only a simplified view is provided for the client to access. It simply provides an Interface without worrying about the implementation. It hides internal complexity behind a single interface that appears simple on the outside. It promotes loose coupling between subsystems and its clients.

8. Design pattern question - Decorator pattern
You are designing a specialized e-commerce website. Lot of items sold by the website have add-ons. Such as, extended warranty with certain electronics items; batteries for some of the items and so on.

All products are arranged in proper catalog and a proper object model with inheritance is already created. To get the price for the given item, there's already an overloaded function defined such as this:

Parent (or Super) class: getPrice() is implemented as void. Child classes have getPrice () which returns the actual price of the item.

Instead of creating more sub classes such as ItemWithWarranty and ItemWithExtraBatteries().

Which design pattern will you use and how?

You can use "Decorator" pattern for this situation.

In the given example, ExtendedWaranty and ExtraBatteries classes can be decorators to the given "Item"; and can inherit from the same Base Item.  
These classes will have "has a" relationship to the original Item.
